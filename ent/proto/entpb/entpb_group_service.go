// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/rotemtam/ent-grpc-example/ent"
	group "github.com/rotemtam/ent-grpc-example/ent/group"
	user "github.com/rotemtam/ent-grpc-example/ent/user"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strconv "strconv"
)

// GroupService implements GroupServiceServer
type GroupService struct {
	client *ent.Client
	UnimplementedGroupServiceServer
}

// NewGroupService returns a new GroupService
func NewGroupService(client *ent.Client) *GroupService {
	return &GroupService{
		client: client,
	}
}

// toProtoGroup transforms the ent type to the pb type
func toProtoGroup(e *ent.Group) (*Group, error) {
	v := &Group{}
	id := int64(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	if edg := e.Edges.Admin; edg != nil {
		id := int64(edg.ID)
		v.Admin = &User{
			Id: id,
		}
	}
	return v, nil
}

// toProtoGroupList transforms a list of ent type to a list of pb type
func toProtoGroupList(e []*ent.Group) ([]*Group, error) {
	var pbList []*Group
	for _, entEntity := range e {
		pbEntity, err := toProtoGroup(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements GroupServiceServer.Create
func (svc *GroupService) Create(ctx context.Context, req *CreateGroupRequest) (*Group, error) {
	group := req.GetGroup()
	m, err := svc.createBuilder(group)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGroup(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements GroupServiceServer.Get
func (svc *GroupService) Get(ctx context.Context, req *GetGroupRequest) (*Group, error) {
	var (
		err error
		get *ent.Group
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetGroupRequest_VIEW_UNSPECIFIED, GetGroupRequest_BASIC:
		get, err = svc.client.Group.Get(ctx, id)
	case GetGroupRequest_WITH_EDGE_IDS:
		get, err = svc.client.Group.Query().
			Where(group.ID(id)).
			WithAdmin(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoGroup(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements GroupServiceServer.Update
func (svc *GroupService) Update(ctx context.Context, req *UpdateGroupRequest) (*Group, error) {
	group := req.GetGroup()
	groupID := int(group.GetId())
	m := svc.client.Group.UpdateOneID(groupID)
	groupName := group.GetName()
	m.SetName(groupName)
	if group.GetAdmin() != nil {
		groupAdmin := int(group.GetAdmin().GetId())
		m.SetAdminID(groupAdmin)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGroup(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements GroupServiceServer.Delete
func (svc *GroupService) Delete(ctx context.Context, req *DeleteGroupRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Group.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements GroupServiceServer.List
func (svc *GroupService) List(ctx context.Context, req *ListGroupRequest) (*ListGroupResponse, error) {
	var (
		err      error
		entList  []*ent.Group
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Group.Query().
		Order(ent.Desc(group.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(group.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListGroupRequest_VIEW_UNSPECIFIED, ListGroupRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListGroupRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithAdmin(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoGroupList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListGroupResponse{
			GroupList:     protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements GroupServiceServer.BatchCreate
func (svc *GroupService) BatchCreate(ctx context.Context, req *BatchCreateGroupsRequest) (*BatchCreateGroupsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.GroupCreate, len(requests))
	for i, req := range requests {
		group := req.GetGroup()
		var err error
		bulk[i], err = svc.createBuilder(group)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Group.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoGroupList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateGroupsResponse{
			Groups: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *GroupService) createBuilder(group *Group) (*ent.GroupCreate, error) {
	m := svc.client.Group.Create()
	groupName := group.GetName()
	m.SetName(groupName)
	if group.GetAdmin() != nil {
		groupAdmin := int(group.GetAdmin().GetId())
		m.SetAdminID(groupAdmin)
	}
	return m, nil
}
